@model TransitusWeb.Models.PurchaseOrderViewModel

@{
    ViewData["Title"] = "Purchase Order Details";
}

<div class="container mt-4">
    <h1>Purchase Order Details</h1>

    <div class="card mb-4">
        <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
            <h5 class="mb-0">PO #@Model.PONumber</h5>
            <span class="badge @GetStatusBadgeClass(Model.Status)">@Model.Status</span>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <dl class="row">
                        <dt class="col-sm-4">@Html.DisplayNameFor(model => model.PurchaseOrderId)</dt>
                        <dd class="col-sm-8">@Html.DisplayFor(model => model.PurchaseOrderId)</dd>

                        <dt class="col-sm-4">Vendor</dt>
                        <dd class="col-sm-8">
                            <a asp-controller="Vendor" asp-action="Details" asp-route-id="@Model.VendorId">@Model.VendorName</a>
                        </dd>

                        <dt class="col-sm-4">@Html.DisplayNameFor(model => model.PONumber)</dt>
                        <dd class="col-sm-8">@Html.DisplayFor(model => model.PONumber)</dd>

                        <dt class="col-sm-4">@Html.DisplayNameFor(model => model.OrderDate)</dt>
                        <dd class="col-sm-8">@Model.OrderDate.ToShortDateString()</dd>
                    </dl>
                </div>
                <div class="col-md-6">
                    <dl class="row">
                        <dt class="col-sm-4">@Html.DisplayNameFor(model => model.ExpectedDeliveryDate)</dt>
                        <dd class="col-sm-8">@(Model.ExpectedDeliveryDate != null ? Model.ExpectedDeliveryDate.Value.ToShortDateString() : "-")</dd>

                        <dt class="col-sm-4">@Html.DisplayNameFor(model => model.Status)</dt>
                        <dd class="col-sm-8">
                            <span class="badge @GetStatusBadgeClass(Model.Status)">@Model.Status</span>
                        </dd>

                        <dt class="col-sm-4">@Html.DisplayNameFor(model => model.TotalAmount)</dt>
                        <dd class="col-sm-8">@Model.TotalAmount.ToString("C")</dd>
                    </dl>
                </div>
            </div>
            <div class="row">
                <div class="col-12">
                    <dl class="row">
                        <dt class="col-sm-2">@Html.DisplayNameFor(model => model.Notes)</dt>
                        <dd class="col-sm-10">@(string.IsNullOrEmpty(Model.Notes) ? "-" : Model.Notes)</dd>
                    </dl>
                </div>
            </div>
        </div>
        <div class="card-footer">
            <a asp-action="Edit" asp-route-id="@Model.PurchaseOrderId" class="btn btn-primary">Edit</a>
            <a asp-action="Index" asp-route-vendorId="@Model.VendorId" class="btn btn-secondary">Back to List</a>
            <a asp-action="Delete" asp-route-id="@Model.PurchaseOrderId" class="btn btn-danger">Delete</a>
        </div>
    </div>

    <!-- Invoices Section -->
    <div class="card mb-4">
        <div class="card-header bg-info text-white d-flex justify-content-between align-items-center">
            <h5 class="mb-0">Invoices</h5>
            <a href="#" class="btn btn-sm btn-light">Create New Invoice</a>
        </div>
        <div class="card-body">
            @if (Model.Invoices != null && Model.Invoices.Any())
            {
                <div class="table-responsive">
                    <table class="table table-striped table-hover">
                        <thead>
                            <tr>
                                <th>Invoice Number</th>
                                <th>Invoice Date</th>
                                <th>Due Date</th>
                                <th>Status</th>
                                <th>Total Amount</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var invoice in Model.Invoices)
                            {
                                <tr>
                                    <td>@invoice.InvoiceNumber</td>
                                    <td>@invoice.InvoiceDate.ToShortDateString()</td>
                                    <td>@invoice.DueDate.ToShortDateString()</td>
                                    <td>
                                        <span class="badge @GetInvoiceStatusBadgeClass(invoice.Status)">@invoice.Status</span>
                                    </td>
                                    <td>@invoice.TotalAmount.ToString("C")</td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <a href="#" class="btn btn-sm btn-info">Details</a>
                                            <a href="#" class="btn btn-sm btn-primary">Edit</a>
                                            <a href="#" class="btn btn-sm btn-danger">Delete</a>
                                        </div>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="alert alert-info">
                    No invoices found for this purchase order.
                </div>
            }
        </div>
    </div>
</div>

@functions {
    string GetStatusBadgeClass(string status)
    {
        return status?.ToLower() switch
        {
            "draft" => "bg-secondary",
            "pending" => "bg-warning text-dark",
            "approved" => "bg-success",
            "rejected" => "bg-danger",
            "completed" => "bg-info",
            "cancelled" => "bg-dark",
            _ => "bg-secondary"
        };
    }

    string GetInvoiceStatusBadgeClass(string status)
    {
        return status?.ToLower() switch
        {
            "pending" => "bg-warning text-dark",
            "paid" => "bg-success",
            "overdue" => "bg-danger",
            "cancelled" => "bg-dark",
            _ => "bg-secondary"
        };
    }
} 